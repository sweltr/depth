set.dir(output=/pool/genomics/stri_istmobiome/data/SWELTR/DEPTH/16S/OTU/pipelineFiles/)
#make.file(inputdir=/pool/genomics/stri_istmobiome/data/SWELTR/RAW_DATA/16S/2019/cutadapt/, type=gz, prefix=ssu)
#
#make.contigs(file=ssu.files, processors=30)
#summary.seqs(fasta=ssu.trim.contigs.fasta, count=ssu.contigs.count_table, processors=20, processors=30)
#
#count.groups(count=ssu.contigs.count_table, processors=30)
#
#screen.seqs(fasta=ssu.trim.contigs.fasta, count=ssu.contigs.count_table, maxambig=0, minlength=252, maxlength=254, maxhomop=6, processors=30)
#summary.seqs(fasta=ssu.trim.contigs.good.fasta, count=ssu.contigs.good.count_table, processors=30)
#count.groups(count=ssu.contigs.good.count_table)
#unique.seqs(fasta=ssu.trim.contigs.good.fasta, count=ssu.contigs.good.count_table)
#summary.seqs(count=ssu.trim.contigs.good.count_table, processors=30)
#
####pcr.seqs(fasta=reference_dbs/silva.nr_v132.align, start=11895, end=25318, keepdots=F, processors=30)
#pcr.seqs(fasta=reference_dbs/silva.nr_v132.align, oligos=ssu.oligos, keepdots=F, processors=30)
#
#############################################################
#### ############  ARB-SILVA WEB ALIGNER   ##################
#### from 13862 to 23445
#############################################################
#
#rename.file(input=reference_dbs/silva.nr_v132.pcr.align, new=reference_dbs/silva.v4.fasta)
#summary.seqs(fasta=reference_dbs/silva.v4.fasta, processors=30)
#align.seqs(fasta=ssu.trim.contigs.good.unique.fasta, reference=reference_dbs/silva.v4.fasta, processors=30)
#summary.seqs(fasta=ssu.trim.contigs.good.unique.align, count=ssu.trim.contigs.good.count_table, processors=30)
#
#screen.seqs(fasta=ssu.trim.contigs.good.unique.align, count=ssu.trim.contigs.good.count_table, start=12749, end=22331, processors=30)
#
#summary.seqs(fasta=current, count=current, processors=30)
#
#count.groups(count=current)
#
#filter.seqs(fasta=ssu.trim.contigs.good.unique.good.align, vertical=T, trump=., processors=30)
#unique.seqs(fasta=ssu.trim.contigs.good.unique.good.filter.fasta, count=ssu.trim.contigs.good.good.count_table)
#count.groups(count=current, processors=30)
#
#summary.seqs(fasta=ssu.trim.contigs.good.unique.good.filter.unique.fasta, count=ssu.trim.contigs.good.unique.good.filter.count_table, processors=30)
#
#pre.cluster(fasta=ssu.trim.contigs.good.unique.good.filter.unique.fasta, count=ssu.trim.contigs.good.unique.good.filter.count_table, diffs=2, processors=30)
#summary.seqs(fasta=ssu.trim.contigs.good.unique.good.filter.unique.precluster.fasta, count=ssu.trim.contigs.good.unique.good.filter.unique.precluster.count_table, processors=30)
#count.groups(count=current, processors=30)
#
#############################################################
#### ############  REMOVE NEGATIVE CONTROL ##################
#### from https://forum.mothur.org/t/negative-control/2754/16
#############################################################
#
#get.groups(fasta=ssu.trim.contigs.good.unique.good.filter.unique.precluster.fasta, count=ssu.trim.contigs.good.unique.good.filter.unique.precluster.count_table, groups=Negative)
#rename.file(input=ssu.trim.contigs.good.unique.good.filter.unique.precluster.pick.fasta, new=neg_control.fasta)
#rename.file(input=ssu.trim.contigs.good.unique.good.filter.unique.precluster.pick.count_table, new=neg_control.count_table)
#summary.seqs(fasta=neg_control.fasta, count=neg_control.count_table, processors=30)
#list.seqs(count=neg_control.count_table)
#
### ########################################################################################################
### library(tidyverse) 
### tmp_nc_reads <- read_tsv("neg_control.count_table", col_names = TRUE, col_types = NULL, skip = 2, col_select = c("Representative_Sequence", "total"))
### tmp_non_nc_reads <- read_tsv("ssu.trim.contigs.good.unique.good.filter.unique.precluster.count_table", col_names = TRUE, col_types = NULL, skip = 2, col_select = c("Representative_Sequence", "total"))
### 
### tmp_reads <- dplyr::left_join(tmp_nc_reads, tmp_non_nc_reads,
###                               by = "Representative_Sequence")
### tmp_reads <- tmp_reads %>% dplyr::rename(c(
###                             "total_reads_NC" = "total.x", 
###                             "total_reads_samps" = "total.y")
###                             ) 
###                             
### tmp_nc_check <- tmp_reads %>%
###   dplyr::mutate(perc_in_neg = 100*(
###     total_reads_NC / (total_reads_NC + total_reads_samps)),
###                 .after = "total_reads_samps")
### tmp_nc_check$perc_in_neg <- round(tmp_nc_check$perc_in_neg, digits = 6)                            
### ########################################################################################################
#
### ############ IN MOTHUR #################################################################################
### count.seqs(count=neg_control.count_table, compress=f)
### count.seqs(count=ssu.trim.contigs.good.unique.good.filter.unique.precluster.count_table, compress=f)
### ########################################################################################################### 
### 
### tmp_nc_dist <- read_tsv("neg_control.full.count_table")
### 
### tmp_all_dist <- read_tsv("ssu.trim.contigs.good.unique.good.filter.unique.precluster.full.count_table")
### tmp_all_dist <- tmp_all_dist %>% select(-starts_with("P00_D00_000_NNN"))
### 
### tmp_nc_dist$total <- NULL
### tmp_all_dist$total <- NULL
### 
### tmp_nc_read_dist <- dplyr::left_join(
###                     tmp_nc_dist, 
###                     tmp_all_dist, 
###                     by = "Representative_Sequence")
###                     
###                     
### tmp_1 <- data.frame(rowSums(tmp_nc_read_dist != 0))
### tmp_2 <- dplyr::select(tmp_nc_read_dist, contains("P00_D00_000_NNN"))
### tmp_2$num_samp_nc <- rowSums(tmp_2 != 0)
### tmp_2 <- dplyr::select(tmp_2, -contains("P00_D00_000_NNN"))
### tmp_3 <- dplyr::select(tmp_nc_read_dist, -contains("P00_D00_000_NNN"))
### tmp_3$num_samp_no_nc <- rowSums(tmp_3 != 0)
### tmp_3 <- dplyr::select(tmp_3, contains("num_samp_no_nc"))                    
### 
### tmp_nc_check <- cbind(tmp_nc_check, tmp_1, tmp_2, tmp_3)
### tmp_nc_check <- tmp_nc_check %>% dplyr::rename("total_samples" = 5)  
### colnames(tmp_nc_check)
### tmp_nc_check <- tmp_nc_check %>%
###   dplyr::mutate(perc_in_neg_samp = 
###                   100*( num_samp_nc / (num_samp_nc + num_samp_no_nc)),
###                   .after = "num_samp_no_nc")
### nc_check <- tmp_nc_check 
### write_delim(nc_check, "reads_in_nc_samples.txt", delim = "\t")
### 
### nc_remove <- tmp_nc_check %>% 
###   filter(perc_in_neg > 10 | perc_in_neg_samp > 10)
### tmp_rem_med <- nc_remove$Representative_Sequence %>% 
###   unlist(strsplit(., split = ", ")) 
### 
### write_delim(
###   data.frame(nc_remove$Representative_Sequence), 
###   "neg_control_subset.accnos", 
###   col_names = FALSE)
########################################################################################################
#    
#remove.seqs(accnos=neg_control_subset.accnos, fasta=ssu.trim.contigs.good.unique.good.filter.unique.precluster.fasta, count=ssu.trim.contigs.good.unique.good.filter.unique.precluster.count_table)
#
########################################################
## ADDED this command to remove NC samples
## [ERROR]: Control_29 is not in your count table. Please correct.
## [ERROR]: Control_18 is not in your count table. Please correct.
## [ERROR]: Control_21 is not in your count table. Please correct.
## [ERROR]: Control_5 is not in your count table. Please correct.
## [ERROR]: Control_15 is not in your count table. Please correct.
#
#remove.groups(count=ssu.trim.contigs.good.unique.good.filter.unique.precluster.pick.count_table, fasta=ssu.trim.contigs.good.unique.good.filter.unique.precluster.pick.fasta, groups=P00_D00_000_NNN)
########################################################
#
## Also added "pick" to commands below
#
#summary.seqs(fasta=ssu.trim.contigs.good.unique.good.filter.unique.precluster.pick.pick.fasta, count=ssu.trim.contigs.good.unique.good.filter.unique.precluster.pick.pick.count_table, processors=30)
#
#count.groups(count=ssu.trim.contigs.good.unique.good.filter.unique.precluster.pick.pick.count_table)
#
########################################
### NEGATIVE CONTROLS Should be GONE ###
########################################
#
chimera.vsearch(fasta=ssu.trim.contigs.good.unique.good.filter.unique.precluster.pick.pick.fasta, count=ssu.trim.contigs.good.unique.good.filter.unique.precluster.pick.pick.count_table, dereplicate=t, processors=30)
summary.seqs(fasta=current, count=current, processors=30)
count.groups(count=current, processors=30)
#
####classify.seqs(fasta=ssu.trim.contigs.good.unique.good.filter.unique.precluster.pick.pick.denovo.vsearch.fasta, count=ssu.trim.contigs.good.unique.good.filter.unique.precluster.pick.pick.denovo.vsearch.count_table, reference=reference_dbs/trainset18_062020.pds.fasta, taxonomy=reference_dbs/trainset18_062020.pds.tax, processors=30)
####classify.seqs(fasta=ssu.trim.contigs.good.unique.good.filter.unique.precluster.pick.pick.denovo.vsearch.fasta, count=ssu.trim.contigs.good.unique.good.filter.unique.precluster.pick.pick.denovo.vsearch.count_table, processors=30, reference=reference_dbs/itgdb.fasta, taxonomy=reference_dbs/itgdb.txt)
####remove.lineage(fasta=ssu.trim.contigs.good.unique.good.filter.unique.precluster.pick.pick.denovo.vsearch.fasta, count=ssu.trim.contigs.good.unique.good.filter.unique.precluster.pick.pick.denovo.vsearch.count_table, taxonomy=ssu.trim.contigs.good.unique.good.filter.unique.precluster.pick.pick.denovo.vsearch.pds.wang.taxonomy, taxon=Chloroplast-Mitochondria-unknown-Eukaryota)
####rename.file(fasta=ssu.trim.contigs.good.unique.good.filter.unique.precluster.pick.pick.denovo.vsearch.pick.fasta, count=ssu.trim.contigs.good.unique.good.filter.unique.precluster.pick.pick.denovo.vsearch.pick.count_table, taxonomy=ssu.trim.contigs.good.unique.good.filter.unique.precluster.pick.pick.denovo.vsearch.pds.wang.pick.taxonomy, prefix=final)
#
classify.seqs(fasta=ssu.trim.contigs.good.unique.good.filter.unique.precluster.pick.pick.denovo.vsearch.fasta, count=ssu.trim.contigs.good.unique.good.filter.unique.precluster.pick.pick.denovo.vsearch.count_table, processors=30, reference=reference_dbs/gsrdb.fasta, taxonomy=reference_dbs/gsrdb.tax)
remove.lineage(fasta=ssu.trim.contigs.good.unique.good.filter.unique.precluster.pick.pick.denovo.vsearch.fasta, count=ssu.trim.contigs.good.unique.good.filter.unique.precluster.pick.pick.denovo.vsearch.count_table, taxonomy=ssu.trim.contigs.good.unique.good.filter.unique.precluster.pick.pick.denovo.vsearch.gsrdb.wang.taxonomy, taxon=Chloroplast-Mitochondria-unknown-Eukaryota)
#
summary.tax(taxonomy=current, count=current)
count.groups(count=current, processors=30)
#
##########################
#
rename.file(fasta=ssu.trim.contigs.good.unique.good.filter.unique.precluster.pick.pick.denovo.vsearch.pick.fasta, count=ssu.trim.contigs.good.unique.good.filter.unique.precluster.pick.pick.denovo.vsearch.pick.count_table, taxonomy=ssu.trim.contigs.good.unique.good.filter.unique.precluster.pick.pick.denovo.vsearch.gsrdb.wang.pick.taxonomy, prefix=final)
#
##########################
###    CLUSTERING      ###
##########################
#
##########################
###    cluster.split   ###
##########################
#
cluster.split(fasta=final.fasta, count=final.count_table, taxonomy=final.taxonomy, taxlevel=4, cluster=f, processors=30) 
cluster.split(file=final.file, count=final.count_table, processors=30)
#
system(mkdir pipelineFiles/cluster.split.gsrdb)
system(mv pipelineFiles/final.opti_mcc.list pipelineFiles/cluster.split.gsrdb/)
system(mv pipelineFiles/final.file pipelineFiles/cluster.split.gsrdb/)
system(mv pipelineFiles/final.dist pipelineFiles/cluster.split.gsrdb/)
#
##########################
###    cluster         ###
##########################
#
dist.seqs(fasta=final.fasta, cutoff=0.03, processors=30)
cluster(column=final.dist, count=final.count_table)

quit()

---
title: "summary"
format: html
---

```{r}
library(phyloseq)
library(janitor)
library(tibble)
library(pime)
library(PERFect)
```

## Quarto

Quarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see <https://quarto.org>.

## Running Code

When you click the **Render** button a document will be generated that includes both content and the output of embedded code. You can embed code like this:

```{r}
load("phyloseq.Rdata")
objects()

physeq

tmp_df <- data.frame(t(otu_table(physeq)))

Counts <- mock2$Counts %>% as.matrix() %>% as.table()
res_sim <- PERFect_sim(Counts)

tmp_df1 <- adorn_totals(tmp_df, where = "col", name = "Sum")
tmp_df1 <- as.data.frame(tibble::rownames_to_column(tmp_df1))
new_df <- data.frame(tmp_df1[, c(1, ncol(tmp_df1))])
write.table(new_df, "lotus3_otu.txt", row.names = FALSE,  sep = "\t", quote = FALSE)

tmp_df1 <- readRDS("seqtab.nochim_pseudo.rds")
tmp_df1 <- as.data.frame(tmp_df1)
tmp_df1 <- adorn_totals(tmp_df1, where = "col", name = "Sum")
tmp_df1 <- as.data.frame(tibble::rownames_to_column(tmp_df1))
new_df <- data.frame(tmp_df1[, c(1, ncol(tmp_df1))])
write.table(new_df, "dada_otu.txt", row.names = FALSE,  sep = "\t", quote = FALSE)


```

You can add options to executable code like this 

```{r}
physeq_tab <- data.frame(otu_table(physeq))
physeq_tab <- physeq_tab %>% tibble::rownames_to_column("ID")
physeq_tab <- jamba::mixedSortDF(physeq_tab, decreasing = FALSE, 
                                      useRownames = FALSE, byCols = 1)
physeq_tab <- physeq_tab %>% tibble::remove_rownames() 
physeq_tab <- physeq_tab %>% tibble::column_to_rownames("ID")
physeq_tab <- data.frame(t(physeq_tab))

physeq_tab_ord <- data.frame(otu_table(physeq))
physeq_tab_ord <- physeq_tab_ord %>% tibble::rownames_to_column("ID")
physeq_tab_ord <- jamba::mixedSortDF(physeq_tab_ord, decreasing = TRUE, 
                                      useRownames = FALSE, byCols = 1)
physeq_tab_ord <- physeq_tab_ord %>% tibble::remove_rownames() 
physeq_tab_ord <- physeq_tab_ord %>% tibble::column_to_rownames("ID")
physeq_tab_ord <- data.frame(t(physeq_tab_ord))

tmp_tab_name <- purrr::map_chr(i, ~ paste0(., "_perfect"))
assign(tmp_tab_name, physeq_tab)

tmp_tab_ord_name <- purrr::map_chr(i, ~ paste0(., "_ord_perfect"))
assign(tmp_tab_ord_name, physeq_tab_ord)

objects()
```


```{r}
ssu_per_pval <- 0.05
physeq_tab <- as.data.frame(physeq_tab)

tmp_sim <- PERFect_sim(X = tmp_df, alpha = 0.05, Order = "NP", center = FALSE)
dim(tmp_sim$filtX)


tmp_sim_ord <- PERFect_sim(X = physeq_tab_ord, alpha = ssu_per_pval, Order = "NP", center = FALSE)
dim(tmp_sim_ord$filtX)

tmp_sim_name <- purrr::map_chr(i, ~ paste0(., "_perfect_sim"))
assign(tmp_sim_name, tmp_sim)

tmp_sim_ord_name <- purrr::map_chr(i, ~ paste0(., "_ord_perfect_sim"))
assign(tmp_sim_ord_name, tmp_sim_ord)

tmp_path <- file.path("files/filtering/perfect/rdata/")
saveRDS(tmp_sim, paste(tmp_path, tmp_sim_name, ".rds", sep = ""))
saveRDS(tmp_sim_ord, paste(tmp_path, tmp_sim_ord_name, ".rds", sep = ""))

rm(list = ls(pattern = "tmp_"))

}
objects(pattern = "_sim")

class(physeq_tab_matrix)
class(tmp_df)
```

```{r}
# Get OTU table from phyloseq object
otu_mat <- otu_table(physeq)

# Make sure taxa are rows
if (!taxa_are_rows(physeq)) {
  otu_mat <- t(otu_mat)
}

otu_mat <- as.matrix(otu_mat)
mode(otu_mat) <- "numeric"   # ensure all numeric, no factors/characters
PERFect_sim(X = otu_mat, alpha = 0.05, Order = "NP", center = FALSE)

```

```{r}
otu_mat <- as(otu_table(physeq), "matrix")

if (!taxa_are_rows(physeq)) {
  otu_mat <- t(otu_mat)
}

# Force only "matrix" class
class(otu_mat) <- "matrix"

PERFect_sim(X = otu_mat, alpha = 0.05, Order = "NP", center = FALSE)

fix_PERFect_sim <- PERFect:::PERFect_sim
body(fix_PERFect_sim) <- body(fix_PERFect_sim) |>
  rlang::expr_replace(
    quote(if (!(class(X) %in% c("matrix"))),
    quote(if (!inherits(X, "matrix"))
  )
class(otu_mat)
# Run the patched function
 otu_mat <- as.matrix(otu_mat)
fix_PERFect_sim(X = otu_mat, alpha = 0.05, Order = "NP", center = FALSE)

PERFect:::PERFect_sim
PERFect_sim(X = unclass(otu_mat), alpha = 0.05, Order = "NP", center = FALSE)
 print(otu_mat)
```


```{r}
samp_ps_filt <- c("physeq")
for (i in samp_ps_filt) {
  tmp_get <- get(i)
  tmp_get_tab <- data.frame(t(otu_table(tmp_get)))
  tmp_get_tab <- tmp_get_tab %>% tibble::rownames_to_column("ID")
  tmp_get_tab <- jamba::mixedSortDF(tmp_get_tab, decreasing = FALSE, 
                                        useRownames = FALSE, byCols = 1)
  tmp_get_tab <- tmp_get_tab %>% tibble::remove_rownames() 
  tmp_get_tab <- tmp_get_tab %>% tibble::column_to_rownames("ID")
  tmp_get_tab <- data.frame(t(tmp_get_tab))

  tmp_get_tab_ord <- data.frame(t(otu_table(tmp_get)))
  tmp_get_tab_ord <- tmp_get_tab_ord %>% tibble::rownames_to_column("ID")
  tmp_get_tab_ord <- jamba::mixedSortDF(tmp_get_tab_ord, decreasing = TRUE, 
                                        useRownames = FALSE, byCols = 1)
  tmp_get_tab_ord <- tmp_get_tab_ord %>% tibble::remove_rownames() 
  tmp_get_tab_ord <- tmp_get_tab_ord %>% tibble::column_to_rownames("ID")
  tmp_get_tab_ord <- data.frame(t(tmp_get_tab_ord))

  tmp_tab_name <- purrr::map_chr(i, ~ paste0(., "_perfect"))
  assign(tmp_tab_name, tmp_get_tab)
  
  tmp_tab_ord_name <- purrr::map_chr(i, ~ paste0(., "_ord_perfect"))
  assign(tmp_tab_ord_name, tmp_get_tab_ord)
  
  rm(list = ls(pattern = "tmp_"))
}
objects()
class(physeq_perfect)
```


